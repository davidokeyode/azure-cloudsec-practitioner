# Set PowerShell Execution Policy
Set-ExecutionPolicy Unrestricted -Force

# Install Chocolatey
$env:chocolateyVersion = '1.4.0'
Set-ExecutionPolicy Bypass -Scope Process -Force
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

# Batch Install CLI tools and SDKs using chocolatey
Start-Job -ScriptBlock {
    choco install googlechrome azure-cli terraform pulumi nodejs.install docker-desktop go rust -y
    choco install miniconda3 --version=4.12.0 --params="'/AddToPath:1 /InstallationType:AllUsers /RegisterPython:1'" -y
    choco install python --version=3.7.2 -y
}

# Create folder structure for pentest tools
$folders = @(
    "$env:SystemDrive\PentestTools",
    "$env:SystemDrive\PentestTools\Azure",
    "$env:SystemDrive\PentestTools\Azure\Attack",
    "$env:SystemDrive\PentestTools\Azure\Attack\BloodHound",
    "$env:SystemDrive\PentestTools\Azure\Attack\StormSpotter",
    "$env:SystemDrive\PentestTools\Azure\Assessment",
    "$env:SystemDrive\PentestTools\Azure\VulnerableEnv"
)
$folders | ForEach-Object { New-Item -ItemType Directory -Path $_ }

# Add the pentest tools folder to the Windows Defender exclusion list
Add-MpPreference -ExclusionPath "$env:SystemDrive\PentestTools"

# Parallelize Azure PowerShell modules installation
Start-Job -ScriptBlock {
    Install-Module -Name AzureAD -Force -AllowClobber
    Install-Module -Name Az -Force -AllowClobber
    Install-Module -Name AzureADPreview -Force -AllowClobber
    Install-Module -Name Microsoft.Graph -Force -AllowClobber
    Install-Module AADInternals -Force
}

# Parallelize Git Clones
Start-Job -ScriptBlock {
    git clone https://github.com/Azure/Stormspotter.git "$env:SystemDrive\PentestTools\Azure\Attack\StormSpotter"
    git clone https://github.com/NetSPI/MicroBurst.git "$env:SystemDrive\PentestTools\Azure\Attack\MicroBurst"
    git clone https://github.com/hausec/PowerZure.git "$env:SystemDrive\PentestTools\Azure\Attack\PowerZure"
    git clone https://github.com/BloodHoundAD/AzureHound/releases/download/v2.0.4/azurehound-windows-amd64.zip "$env:SystemDrive\PentestTools\Azure\Attack\AzureHound"
    git clone https://github.com/NetSPI/FuncoPop.git "$env:SystemDrive\PentestTools\Azure\Attack\FuncoPop"
    git clone https://github.com/BloodHoundAD/BARK "$env:SystemDrive\PentestTools\Azure\Attack\BARK"
    git clone https://github.com/BishopFox/cloudfox.git "$env:SystemDrive\PentestTools\Azure\Attack\cloudfox"
    git clone https://github.com/cyberark/SkyArk "$env:SystemDrive\PentestTools\Azure\Attack\SkyArk"
    git clone https://github.com/dafthack/MSOLSpray "$env:SystemDrive\PentestTools\Azure\Attack\MSOLSpray"
    git clone -b SASTokenVer https://github.com/jsa2/AADAppAudit "$env:SystemDrive\PentestTools\Azure\Assessment\AADAppAudit"
    git clone https://github.com/csandker/Azure-AccessPermissions.git "$env:SystemDrive\PentestTools\Azure\Assessment\Azure-AccessPermissions"
    git clone https://github.com/nccgroup/ScoutSuite "$env:SystemDrive\PentestTools\Azure\Assessment\ScoutSuite"
    git clone https://github.com/mvelazc0/BadZure "$env:SystemDrive\PentestTools\Azure\VulnerableEnv\BadZure"
    git clone https://github.com/ine-labs/AzureGoat "$env:SystemDrive\PentestTools\Azure\VulnerableEnv\AzureGoat"
    git clone https://github.com/XMCyber/XMGoat "$env:SystemDrive\PentestTools\Azure\VulnerableEnv\XMGoat"
    git clone https://github.com/mandiant/Azure_Workshop "$env:SystemDrive\PentestTools\Azure\VulnerableEnv\Mandiant-Azure-Workshop"
    git clone https://github.com/Azure/CONVEX "$env:SystemDrive\PentestTools\Azure\VulnerableEnv\Convex"
}

# Download and Install Additional Tools
Start-Job -ScriptBlock {
    # Add AzureHound
    Invoke-WebRequest -Uri "https://github.com/BloodHoundAD/AzureHound/releases/download/v2.0.4/azurehound-windows-amd64.zip" -OutFile "$env:SystemDrive\Downloads\AzureHound.zip"
    Expand-Archive -LiteralPath "$env:SystemDrive\Downloads\AzureHound.zip" -DestinationPath "$env:SystemDrive\PentestTools\Azure\Attack\AzureHound"
    Remove-Item "$env:SystemDrive\Downloads\AzureHound.zip"

    # Add ScubaGear
    Invoke-WebRequest -Uri "https://github.com/cisagov/ScubaGear/releases/download/0.3.0/ScubaGear-0.3.0.zip" -OutFile "$env:SystemDrive\Downloads\ScubaGear.zip"
    Expand-Archive -Path "$env:SystemDrive\Downloads\ScubaGear.zip" -DestinationPath "$env:SystemDrive\PentestTools\Azure\Assessment" -Force
    Get-ChildItem -Recurse "$env:SystemDrive\PentestTools\Azure\Assessment\ScubaGear-0.3.0" | Unblock-File
    Remove-Item -Path "$env:SystemDrive\Downloads\ScubaGear.zip"

    # Add CNAPPGoat
    Invoke-WebRequest -Uri "https://github.com/ermetic-research/cnappgoat/releases/download/v0.1.0-beta/cnappgoat_0.1.0-beta_Windows-64bit.zip" -OutFile "$env:SystemDrive\Downloads\CNAPPGoat.zip"
    Expand-Archive -LiteralPath "$env:SystemDrive\Downloads\CNAPPGoat.zip" -DestinationPath "$env:SystemDrive\PentestTools\Azure\VulnerableEnv\CNAPPGoat"
    Remove-Item "$env:SystemDrive\Downloads\CNAPPGoat.zip"
}

# Install Python Libraries
Start-Job -ScriptBlock {
    $piplocation = "$env:SystemDrive\Python37\Scripts"
    . $piplocation\pip.exe install flask requests python-dotenv pylint matplotlib pillow requests-futures ordereddict pipenv dnspython astroid autopep8 azure-core azure-identity azure-mgmt-compute azure-mgmt-core azure-mgmt-storage PyInputPlus azure-mgmt-network azure-mgmt-resource azure-common
    . $piplocation\pip.exe install --upgrade numpy
    . $piplocation\pip.exe install requests --upgrade
    . $piplocation\pip.exe install urllib3==1.26

    # Add ROADTool
    . $piplocation\pip.exe install roadrecon
}

# Additional Configurations
Start-Job -ScriptBlock {
    # Disable IE First Run (Needed by some tools)
    if (-not (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Internet Explorer\Main")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Internet Explorer" -Name "Main" -Force
    }

    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Internet Explorer\Main" -Name "DisableFirstRunCustomize" -Value 1 -Type DWord -Force
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\Internet Explorer\Main" -Name "RunOnceComplete" -Value 1 -Type DWord -Force
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\Internet Explorer\Main" -Name "RunOnceHasShown" -Value 1 -Type DWord -Force
}

# Add Script to deploy BloodHound
$filePath = "$env:SystemDrive\PentestTools\Azure\Attack\BloodHound\install-bloodhound.ps1"
$scriptContent = @'
function Ensure-DockerRunning {
    $dockerProcess = Get-Process -Name "Docker Desktop" -ErrorAction SilentlyContinue

    if (-not $dockerProcess) {
        Write-Output "Docker process is not running. Starting Docker..."
        $dockerPath = "$env:ProgramFiles\Docker\Docker\Docker Desktop.exe"
        Start-Process -Wait -FilePath $dockerPath -ArgumentList "-AcceptLicense"
        Write-Output "Docker has been started successfully."
    } else {
        Write-Output "Docker process is already running."
    }
}

Ensure-DockerRunning

# Download and run BloodHound using Docker Compose
Write-Output "Downloading BloodHound docker-compose.yml file..."
$dockerComposeYml = Invoke-WebRequest -Uri "https://github.com/SpecterOps/BloodHound/raw/main/examples/docker-compose/docker-compose.yml" -UseBasicParsing

Write-Output "Starting BloodHound using Docker Compose..."
$dockerComposeYml.Content | docker compose -f - up | Out-File -FilePath "$env:SystemDrive\bloodhound-output.log"

Write-Output "BloodHound has been started and logs are saved to $env:SystemDrive\bloodhound-output.log"
'@
$scriptContent | Out-File $filePath
Write-Output "Script has been saved to $filePath"

# Add Script to deploy Stormspotter
$filePath = "$env:SystemDrive\PentestTools\Azure\Attack\StormSpotter\install-stormspotter.ps1"
$scriptContent = @'
function Ensure-DockerRunning {
    $dockerProcess = Get-Process -Name "Docker Desktop" -ErrorAction SilentlyContinue

    if (-not $dockerProcess) {
        Write-Output "Docker process is not running. Starting Docker..."
        $dockerPath = "$env:ProgramFiles\Docker\Docker\Docker Desktop.exe"
        Start-Process -Wait -FilePath $dockerPath -ArgumentList "-AcceptLicense"
        Write-Output "Docker has been started successfully."
    } else {
        Write-Output "Docker process is already running."
    }
}

Ensure-DockerRunning

# Download and run StormSpotter using Docker Compose
Write-Output "Downloading StormSpotter docker-compose.yml file..."
$dockerComposeYml = Invoke-WebRequest -Uri "https://raw.githubusercontent.com/Azure/Stormspotter/main/docker-compose.yaml" -UseBasicParsing

Write-Output "Starting StormSpotter using Docker Compose..."
$dockerComposeYml.Content | docker compose -f - up | Out-File -FilePath "$env:SystemDrive\StormSpotter-output.log"

Write-Output "StormSpotter has been started and logs are saved to $env:SystemDrive\StormSpotter-output.log"
'@
$scriptContent | Out-File $filePath
Write-Output "Script has been saved to $filePath"

# Wait for all jobs to complete before finishing
Get-Job | Wait-Job

# Check if any jobs failed
$failedJobs = Get-Job | Where-Object { $_.State -eq 'Failed' }

if ($failedJobs.Count -gt 0) {
    # Output the errors for logging purposes
    $failedJobs | ForEach-Object {
        Write-Error "Job $($_.Id) failed with reason: $($_.Reason)"
    }

    # Exit with a non-zero status code to indicate failure
    exit 1
} else {
    # Exit with a status code of 0 to indicate success
    exit 0
}

# Disable IE Enhanced Security Configuration
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}" -Name "IsInstalled" -Value 0

Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}" -Name "IsInstalled" -Value 0
