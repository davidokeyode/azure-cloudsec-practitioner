# Initialization
$starttime = Get-Date
Write-Host -ForegroundColor Green "Deployment Started $starttime"

# Function to display formatted headers
function Display-Header {
    param (
        [string]$message
    )
    $line = '#' * ($message.Length + 8)
    Write-Host -ForegroundColor Green $line
    Write-Host -ForegroundColor Green "#   $message   #"
    Write-Host -ForegroundColor Green $line
}

# Create victimadminuser
$upnsuffix = (az ad signed-in-user show --query userPrincipalName --output tsv) -replace '.*@'
$password = Read-Host "Please enter a password"
$securepassword = ConvertTo-SecureString -String $password -AsPlainText -Force
$user = "victimadminuser@$upnsuffix"
$displayname = $user.Split('@')[0]
Display-Header "Creating new admin user $user in Azure AD"
New-AzADUser -DisplayName $displayname -UserPrincipalName $user -Password $securepassword -MailNickname $displayname

# Assign role in Azure subscription
$subid = az account show --query id --output tsv
Display-Header "Assigning the Reader role to $user"
az role assignment create --role "Reader" --assignee $user --subscription $subid

# Create Storage account with SAS token
$group = "pentest-rg"
$location = "uksouth"
az group create --name $group --location $location
$random = Get-Random -Maximum 10000
$storagename = "pentest$random"
$containername = "exfil"
$blobname = "azureprofile.zip"
Display-Header "Creating a new storage account $storagename"
az storage account create --name $storagename --resource-group $group --location $location --sku Standard_LRS --allow-blob-public-access false --https-only true
Display-Header "Creating a new blob container $containername in $storagename"
az storage container create --account-name $storagename --name $containername
$ctx = (Get-AzStorageAccount -ResourceGroupName $group -AccountName $storagename).context
$EndTime = $startTime.AddDays(6)
$sastoken = New-AzStorageAccountSASToken -Service Blob -ResourceType Service,Container,Object -Permission "racwdlup" -Context $ctx -StartTime $StartTime -ExpiryTime $EndTime

# Download Windows Custom Script Extension
Invoke-WebRequest -Uri https://github.com/davidokeyode/azure-cloudsec-practitioner/tree/main/pentest-scenarios/01-admin-theft-scenario/custom-script-extensions/windows_custom_extension.json -OutFile windows_custom_extension.json

# Deploy Windows VM with Azure PowerShell installed (Output public IP)
$winvmname = "winvm$random"
$windowsuser = "windowsadmin"
Display-Header "Creating a new Windows VM $winvmname"
az vm create --resource-group $group --name $winvmname --image win2016datacenter --admin-username $windowsuser --admin-password $password --size Standard_D2s_v3
az vm open-port --port 3389 --resource-group $group --name $winvmname --priority 200
$winvmpubip = az vm show -d -g $group -n $winvmname --query publicIps -o tsv
Set-AzVMCustomScriptExtension -ResourceGroupName $group -VMName $winvmname -Location $location -FileUri "https://github.com/davidokeyode/azure-cloudsec-practitioner/tree/main/pentest-scenarios/01-admin-theft-scenario/custom-script-extensions/azure_powershell_install.ps1" -Run 'azure_powershell_install.ps1' -Name AzurePSExtension






# Script Output
Start-Transcript -Path admin-token-theft-output.txt
Display-Header "Script Output"
Write-Host -ForegroundColor Green "Azure Admin User: $user"
Write-Host -ForegroundColor Green "Azure Admin User Password: $password"
Write-Host -ForegroundColor Green " "
Write-Host -ForegroundColor Green "Windows VM Public IP: $winvmpubip"
Write-Host -ForegroundColor Green "Windows VM Username: $windowsuser"
Write-Host -ForegroundColor Green "Windows VM User Password: $password"
Write-Host -ForegroundColor Green " "
Write-Host -ForegroundColor Green "Exfiltration Storage Location: https://$storagename.blob.core.windows.net/$containername/$blobname$sastoken"
Stop-Transcript
$endtime = Get-Date
Write-Host -ForegroundColor Green "Deployment Ended $endtime"
